'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StyleSheet = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _jss = require('jss');

var _jss2 = _interopRequireDefault(_jss);

var _modifier = require('./modifier');

var _className = require('./className');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function createClassMap(classMap) {
  return function (props, state) {
    return Object.keys(classMap).reduce(function (classNames, modifier) {
      if ((0, _modifier.match)(modifier, props, state)) {
        classNames.push(classMap[modifier]);
      }

      return classNames;
    }, []).join(' ');
  };
}

function create(styles) {
  var styleSheet = _jss2.default.createStyleSheet(styles, { named: true });

  var classMap = Object.keys(styles).reduce(function (result, modifier) {
    return _extends({}, result, _defineProperty({}, modifier, styleSheet.classes[modifier]));
  }, {});

  styleSheet.attach();

  return createClassMap(classMap);
}

function createNamed(className, styles) {
  var _Object$keys$reduce = Object.keys(styles).reduce(function (result, modifier) {
    var modifierClassName = (0, _className.getModClassName)(className, modifier);

    return {
      classMap: _extends({}, result.classMap, _defineProperty({}, modifier, modifierClassName)),
      stylesMap: _extends({}, result.stylesMap, _defineProperty({}, '.' + modifierClassName, styles[modifier]))
    };
  }, { classMap: [], stylesMap: [] }),
      classMap = _Object$keys$reduce.classMap,
      stylesMap = _Object$keys$reduce.stylesMap;

  _jss2.default.createStyleSheet(stylesMap, { named: false }).attach();

  return createClassMap(classMap);
}

var createNative = function createNative(styles) {
  return function (props, state) {
    return Object.keys(styles).reduce(function (result, modifier) {
      if ((0, _modifier.match)(modifier, props, state)) {
        return _extends({}, result, styles[modifier]);
      }

      return result;
    }, {});
  };
};

var StyleSheet = exports.StyleSheet = {
  create: create,
  createNamed: createNamed,
  createClassMap: createClassMap,
  createNative: createNative
};